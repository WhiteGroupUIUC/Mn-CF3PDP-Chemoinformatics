import sys
sys.path.append('/usr/local/lib/python3.7/site-packages/')
import os
import time
from typing import List
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from rdkit import Chem, DataStructs
from rdkit.Chem.rdchem import Mol
from rdkit.Chem.MolStandardize.rdMolStandardize import LargestFragmentChooser
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
import umap
import hdbscan


# Silence non-critical RDKit warnings to minimize unnecessary outputs
from rdkit import RDLogger
lg = RDLogger.logger()
lg.setLevel(RDLogger.CRITICAL)

# Calculate RDKFingerprint for Data Set

def compute_RDKFingerprint(smiles_list: List[str]):
    """ Computes RDKit Fingerprints """
    
    keep_idx = []
    descriptors = []
    for i, smiles in enumerate(smiles_list):
        RDKFingerprint = _compute_single_RDKFingerprint(smiles)
        if RDKFingerprint is not None:
            keep_idx.append(i)
            descriptors.append(RDKFingerprint)

    return np.vstack(descriptors), keep_idx

def _compute_single_RDKFingerprint(smiles: str):
    try:
        mol = Chem.MolFromSmiles(smiles)
    except Exception as E:
        return None

    if mol:
        mol = [mol]
        fp = [Chem.RDKFingerprint(x) for x in mol]
        return np.array(fp)
    
    return None

#Read Input File

input = pd.read_csv("file_name.csv", '\t')

# To Read RDKFingerprint

input_descriptors = compute_RDKFingerprint(input["smiles"])

%%time
# Compute desrciptors and keep track of which failed to featurize
input_RDKFingerprint_descriptors, input_keep_idx = compute_RDKFingerprint(input["smiles"])

# Only keep those that sucessfully featurized
input = input.iloc[input_keep_idx]

[8]

#To Run UMAP and export CSV file

import csv


umap_mdel_global = umap.UMAP(metric = "jaccard",
                               n_neighbors = 25,
                               n_components = 2,
                               low_memory = False,
                               min_dist = 0.001)
X_umap_global = umap_model_global.fit_transform(input_RDKFingerprint_descriptors)
input["UMAP_0"], input["UMAP_1"] = X_umap_global[:,0], X_umap_global[:,1]

header = ['name', 'smiles', 'UMAP_0', 'UMAP_1']
data1 = input['name']
data2 = input['smiles']

with open(â€™output.csv', 'w', newline='') as f:    
    writer = csv.writer(f)
    writer.writerow(data1)
    writer.writerow(data2) 
    writer.writerow(input["UMAP_0"])
    writer.writerow(input["UMAP_1"])

[9]

#To Visualize Output in Python

palette = sns.color_palette(["red", "dodgerblue", "black"])
for method in ["UMAP"]:
    plt.figure(figsize=(8,8))
    sns.scatterplot(data=input,
                    x=f"{method}_0",
                    y=f"{method}_1",
                    hue="name",
                    alpha=0.5,
                    palette=palette)
    plt.title(f"{method} Embedding of Dataset")
    plt.show()
